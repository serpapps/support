name: Mirror new tickets to private repo

on:
  issues:
    types: [opened]

permissions:
  contents: read
  issues: write

jobs:
  mirror:
    runs-on: ubuntu-latest
    steps:
      - name: Create issue in private repo
        id: create
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PRIVATE_REPO_TOKEN }}
          script: |
            const body = context.payload.issue.body || "";
            const title = `[Ticket] ${context.payload.issue.title}`;
            const owner = 'YOUR_ORG_OR_USER';
            const repo = 'YOUR_PRIVATE_SUPPORT_REPO';
            const labels = ['support']; // adjust if you want

            const res = await github.rest.issues.create({
              owner, repo, title,
              body: `**From:** @${context.payload.issue.user.login}\n**Source:** ${context.payload.issue.html_url}\n\n---\n${body}`,
              labels
            });
            core.setOutput('private_url', res.data.html_url);
            core.setOutput('private_number', res.data.number);

      - name: (Optional) Create ticket in GHL
        if: ${{ success() }}
        run: |
          curl -sS -X POST "https://services.leadconnectorhq.com/v1/tickets" \
            -H "Authorization: Bearer ${{ secrets.GHL_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @- <<'JSON'
          {
            "subject": "${{ github.event.issue.title }}",
            "message": "Mirrored from ${{
              github.event.issue.html_url
            }}\n\n${{ github.event.issue.body }}",
            "customFields": {
              "github_user": "${{ github.event.issue.user.login }}",
              "private_issue_url": "${{ steps.create.outputs.private_url }}"
            }
          }
          JSON

      - name: Acknowledge & redact public issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const privateUrl = '${{ steps.create.outputs.private_url }}';

            // comment
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: issue.number,
              body: `✅ Thanks — your ticket has been received and made private.\nInternal reference: ${privateUrl}\n\nWe’ll follow up by email.`
            });

            // edit body to remove any PII
            await github.rest.issues.update({
              ...context.repo,
              issue_number: issue.number,
              title: `[REDACTED] ${issue.title}`,
              body: '_This ticket was mirrored privately and redacted for your privacy._'
            });

            // lock & close
            await github.rest.issues.lock({
              ...context.repo,
              issue_number: issue.number,
              lock_reason: 'resolved'
            });
            await github.rest.issues.update({
              ...context.repo,
              issue_number: issue.number,
              state: 'closed'
            });
