name: Send new tickets to GHL and redact

on:
  issues:
    types: [opened]

permissions:
  contents: read
  issues: write

jobs:
  send-to-ghl:
    runs-on: ubuntu-latest
    steps:
      - name: Post ticket to GHL webhook
        id: ghl
        uses: actions/github-script@v7
        env:
          GHL_WEBHOOK_URL: ${{ secrets.GHL_WEBHOOK_URL }}
        with:
          script: |
            if (!process.env.GHL_WEBHOOK_URL) {
              core.setFailed('Missing GHL_WEBHOOK_URL secret');
              return;
            }

            const issue = context.payload.issue;
            const repoFull = process.env.GITHUB_REPOSITORY;

            // Build a clean payload for GHL
            const payload = {
              source: "github_issue",
              repository: repoFull,
              issue: {
                id: issue.id,
                number: issue.number,
                url: issue.html_url,
                title: issue.title,
                body: issue.body || "",
                labels: (issue.labels || []).map(l => typeof l === 'string' ? l : l.name),
                created_at: issue.created_at,
                user: {
                  login: issue.user?.login,
                  html_url: issue.user?.html_url
                }
              }
            };

            // Send to your GHL inbound webhook
            const res = await fetch(process.env.GHL_WEBHOOK_URL, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
            });

            const text = await res.text().catch(() => '');
            core.setOutput('status', String(res.status));
            core.setOutput('response', text);

            if (!res.ok) {
              core.warning(`GHL webhook responded ${res.status}: ${text}`);
            }

      - name: Acknowledge in public issue
        if: always()  # we still acknowledge even if webhook errored
        uses: actions/github-script@v7
        with:
          script: |
            const status = core.getInput('status', { required: false }) || 'submitted';
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.payload.issue.number,
              body: `✅ Thanks — your ticket has been received.\n\nWe've routed it to our support system and will follow up by email. (ref: ${status})`
            });

      - name: Redact & close public issue
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue.number;

            // Redact title/body
            await github.rest.issues.update({
              ...context.repo,
              issue_number,
              title: `[REDACTED] ${context.payload.issue.title}`.slice(0, 240),
              body: `_This ticket was forwarded to our support system and redacted for your privacy._`
            });

            // Lock and close
            await github.rest.issues.lock({
              ...context.repo,
              issue_number,
              lock_reason: 'resolved'
            });
            await github.rest.issues.update({
              ...context.repo,
              issue_number,
              state: 'closed'
            });

      # --- OPTIONAL: direct GHL API instead of webhook ---
      # If you prefer the official API with a Bearer key, replace the webhook step above
      # with this step and add a repo secret: GHL_API_KEY
      #
      # - name: Create ticket via GHL API (example)
      #   if: false  # set to true and remove the webhook step above if you switch
      #   run: |
      #     echo '{}' > payload.json
      #     node -e 'const fs=require("fs");const i=${JSON.stringify({
      #       repo: "${{ github.repository }}",
      #       number: "${{ github.event.issue.number }}",
      #       url: "${{ github.event.issue.html_url }}",
      #       title: "${{ github.event.issue.title }}",
      #       body: "${{ github.event.issue.body || "" }}",
      #       user: "${{ github.event.issue.user.login }}"
      #     })};fs.writeFileSync("payload.json", JSON.stringify(i));'
      #     curl -sS -X POST "https://services.leadconnectorhq.com/v1/your-endpoint-here" \
      #       -H "Authorization: Bearer ${{ secrets.GHL_API_KEY }}" \
      #       -H "Content-Type: application/json" \
      #       --data-binary @payload.json
