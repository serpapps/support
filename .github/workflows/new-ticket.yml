name: Send new GitHub issues to GHL (v2, PAT) + redact

on:
  issues:
    types: [opened]

permissions:
  contents: read
  issues: write

# REQUIRED SECRETS (Repo → Settings → Secrets and variables → Actions)
# - GHL_PAT_TOKEN     → Private Access Token from GHL "Private Integrations" (NOT the old API key)
# - GHL_LOCATION_ID   → Your Location (sub-account) ID
# - GHL_PIPELINE_ID   → Pipeline ID for opportunities
# - GHL_STAGE_ID      → Default stage ID within that pipeline
# OPTIONAL:
# - GHL_USER_ID       → Assign opportunity to this user/agent (optional)

jobs:
  to-ghl:
    runs-on: ubuntu-latest
    steps:
      - name: Extract fields from issue
        id: prep
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue || {};
            const body = issue.body || "";

            // Pull the first email found in the body (from the Issue Form)
            const emailMatch = body.match(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/i);
            const email = emailMatch ? emailMatch[0] : "";

            // Try to pull a phone (very loose)
            const phoneMatch = body.match(/\+?[0-9()\-.\s]{7,}/);
            const phone = phoneMatch ? phoneMatch[0] : "";

            // Use GH login as a fallback "name"
            const name = (issue.user && issue.user.login) ? issue.user.login : "GitHub User";

            core.setOutput('title', issue.title || "New ticket");
            core.setOutput('url', issue.html_url || "");
            core.setOutput('body', body);
            core.setOutput('email', email);
            core.setOutput('phone', phone);
            core.setOutput('name', name);

      - name: Upsert Contact in GHL (v2)
        id: contact
        run: |
          set -e
          AUTH="Authorization: Bearer ${{ secrets.GHL_PAT_TOKEN }}"
          VER="Version: 2021-07-28"
          CT="Content-Type: application/json"
          AC="Accept: application/json"

          # Build contact payload. locationId is required.
          jq -n \
            --arg loc "${{ secrets.GHL_LOCATION_ID }}" \
            --arg name "${{ steps.prep.outputs.name }}" \
            --arg email "${{ steps.prep.outputs.email }}" \
            --arg phone "${{ steps.prep.outputs.phone }}" \
            '{
              locationId: $loc,
              name: $name
            }
            | if ($email|length) > 0 then .email = $email else . end
            | if ($phone|length) > 0 then .phone = $phone else . end
            ' > contact.json

          echo "---- contact.json (request) ----"
          cat contact.json

          RESP=$(curl -sS -X POST "https://services.leadconnectorhq.com/contacts/" \
            -H "$AUTH" -H "$VER" -H "$CT" -H "$AC" \
            --data-binary @contact.json)

          echo "---- contact response ----"
          echo "$RESP" | jq . || echo "$RESP"

          # Try multiple shapes GHL may return
          CONTACT_ID=$(echo "$RESP" | jq -r '.contact.id // .id // .data.id // empty')
          echo "CONTACT_ID=$CONTACT_ID" >> $GITHUB_OUTPUT || true

      - name: Create Opportunity in GHL (v2)
        run: |
          set -e
          AUTH="Authorization: Bearer ${{ secrets.GHL_PAT_TOKEN }}"
          VER="Version: 2021-07-28"
          CT="Content-Type: application/json"
          AC="Accept: application/json"

          jq -n \
            --arg loc "${{ secrets.GHL_LOCATION_ID }}" \
            --arg pipeline "${{ secrets.GHL_PIPELINE_ID }}" \
            --arg stage "${{ secrets.GHL_STAGE_ID }}" \
            --arg title "${{ steps.prep.outputs.title }}" \
            --arg url "${{ steps.prep.outputs.url }}" \
            --arg desc "${{ steps.prep.outputs.body }}" \
            --arg contactId "${{ steps.contact.outputs.CONTACT_ID }}" \
            --arg assigneeId "${{ secrets.GHL_USER_ID }}" \
            '{
              locationId: $loc,
              pipelineId: $pipeline,
              stageId: $stage,
              name: $title,
              status: "open",
              monetaryValue: 0,
              notes: ("From: " + $url + "\n\n" + $desc)
            }
            | if ($contactId|length) > 0 then .contactId = $contactId else . end
            | if ($assigneeId|length) > 0 then .assignedUserId = $assigneeId else . end
            ' > opp.json

          echo "---- opp.json (request) ----"
          cat opp.json

          ORESP=$(curl -sS -X POST "https://services.leadconnectorhq.com/opportunities/" \
            -H "$AUTH" -H "$VER" -H "$CT" -H "$AC" \
            --data-binary @opp.json)

          echo "---- opportunity response ----"
          echo "$ORESP" | jq . || echo "$ORESP"

      - name: Acknowledge in GitHub
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.payload.issue.number,
              body: "✅ Received — we created a private support record in our desk and will follow up by email."
            });

      - name: Redact & close the public issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue.number;
            await github.rest.issues.update({
              ...context.repo,
              issue_number,
              title: `[REDACTED] ${context.payload.issue.title}`.slice(0, 240),
              body: "_This ticket was forwarded to our support system and redacted for your privacy._"
            });
            await github.rest.issues.lock({
              ...context.repo,
              issue_number,
              lock_reason: 'resolved'
            });
            await github.rest.issues.update({
              ...context.repo,
              issue_number,
              state: 'closed'
            });
